import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { _getUsers } from '../_DATA';

// sarahedo: {
//     id: 'sarahedo',
//     name: 'Sarah Edo',
//     avatarURL: 'https://picsum.photos/200/300',
//     answers: {
//       "8xf0y6ziyjabvozdd253nd": 'optionOne',
//       "6ni6ok3ym7mf1p33lnez": 'optionTwo',
//       "am8ehyc8byjqgar0jgpub9": 'optionTwo',
//       "loxhs1bqm25b708cmbf3g": 'optionTwo'
//     },
//     questions: ['8xf0y6ziyjabvozdd253nd', 'am8ehyc8byjqgar0jgpub9']
//   },
const initialState = {
  users:{},
  logedUser:{},
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllusers = createAsyncThunk(
  'users/getAll',
  async () => {
    const response = await _getUsers();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const usersSlice = createSlice({
  name: 'usersSlice',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    login: (state, action) => { 
      console.log(action)
      state.logedUser = state.users[action.payload];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllusers.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAllusers.fulfilled, (state, action) => {
        state.status = 'idle';
        state.users = action.payload;
      });
  },
});

export const { login } = usersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectUsers = (state) => state.users.users;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default usersSlice.reducer;
