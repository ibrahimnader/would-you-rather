import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { _getUsers } from "../_DATA";

const initialState = {
  users: {},
  logedUser: {},
  authed: false,
  status: "idle",
};
// export const loginandGetQuestions = (user) => async (dispatch) => {
//   await dispatch(login(user));
//   await dispatch(getAllQuestions());
// };

export const getAllusers = createAsyncThunk("users/getAll", async () => {
  const response = await _getUsers();
  return response;
});

export const usersSlice = createSlice({
  name: "usersSlice",
  initialState,
  reducers: {
    login: (state, action) => {
      state.logedUser = state.users[action.payload];
      state.authed = true;
    },
    logout: (state) => {
      state.logedUser = {};
      state.authed = false;
    },
    updateUsers: (state, action) => {
      let { authedUser, qid, answer } = action.payload;
      state.users = {
        ...state.users,
        [authedUser]: {
          ...state.users[authedUser],
          answers: {
            ...state.users[authedUser].answers,
            [qid]: answer,
          },
        },
      };
      state.logedUser = state.users[authedUser];
    },
    addQuestionToUser: (state, action) => {
      let  id = action.payload;
       state.logedUser.questions.push(id)
       state.users[state.logedUser.id]=state.logedUser
      
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllusers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getAllusers.fulfilled, (state, action) => {
        state.status = "idle";
        state.users = action.payload;
      });
  },
});

export const { login, logout, updateUsers,addQuestionToUser } = usersSlice.actions;

export const selectUsers = (state) => state.users.users;
export const selectUser = (id) => (state) => state.users.users[id];
export const authed = (state) => state.users.authed;
export const logedUser = (state) => state.users.logedUser;

export default usersSlice.reducer;
